"""This modules contains the basic Generator classes."""

from __future__ import annotations

from abc import ABC
from abc import abstractmethod
from dataclasses import dataclass

# from typing import Self
from typing import Generic
from typing import Self
from typing import TypeVar


# region TypeVars used by generics

T = TypeVar("T", bool, str, float, int)
U = TypeVar("U", bool, str, float, int)
T_SFI = TypeVar("T_SFI", str, float, int)
T_BFI = TypeVar("T_BFI", bool, float, int)
T_FI = TypeVar("T_FI", float, int)
T_BI = TypeVar("T_BI", bool, int)
T_BF = TypeVar("T_BF", bool, float)
T_F = TypeVar("T_F", float, float)
T_B = TypeVar("T_B", bool, bool)
T_I = TypeVar("T_I", int, int)
# endregion

# region Generic Abstract Classes


@dataclass
class Generator(Generic[T], ABC):
    """Basic Abstract Generator Class."""

    @abstractmethod
    def generate(self, n: int) -> list[T]:
        """Generate n values.

        Args:
            n: The number of values to generate.

        Returns:
            list[str]: The generated values.
        """
        ...

    @abstractmethod
    def copy(self) -> Self:
        """Create a copy of the Generator."""
        ...

    def to_int(self) -> GeneratorInt:
        """Convert the Generator to a Generator of integers."""
        return GeneratorWrapperInt(self)

    def to_float(self) -> GeneratorFloat:
        """Convert the Generator to a Generator of floats."""
        return GeneratorWrapperFloat(self)

    def to_str(self) -> GeneratorStr:
        """Convert the Generator to a Generator of strings."""
        return GeneratorWrapperStr(self)

    def to_bool(self) -> GeneratorBool:
        """Convert the Generator to a Generator of booleans."""
        return GeneratorWrapperBool(self)


@dataclass
class GeneratorComposite(Generator[T], ABC):
    """A Composite Generator that combines two Generators."""

    left: Generator[T]
    right: Generator[T]

    @abstractmethod
    def generate(self, n: int) -> list[T]:
        """Generate n values.

        Args:
            n: The number of values to generate.

        Returns:
            list[str]: The generated values.
        """
        ...

    def zip_generators(self, n: int) -> zip[tuple[T, T]]:
        """Zip the values generated by the two Generators."""
        lhs_values: list[T] = self.left.generate(n)
        rhs_values: list[T] = self.right.generate(n)

        return zip(lhs_values, rhs_values, strict=True)

    def copy(self) -> Self:
        """Create a copy of the GeneratorComposite."""
        return self.__class__(self.left.copy(), self.right.copy())


@dataclass
class GeneratorWrapper(Generator[T], Generic[U, T], ABC):
    """A Wrapper class for converting Generators."""

    internal: Generator[U]

    def copy(self) -> Self:
        """Create a copy of the GeneratorWrapper."""
        return self.__class__(self.internal.copy())

    @staticmethod
    def convert(x: U, t: type[T]) -> T:
        """Convert the internal value to the response type.

        Args:
            x: The value to convert.
            t: The type to convert to.

        Returns:
            T: The converted value.
        """
        try:
            return t(x)
        except ValueError:
            return t()

    def wrapper_generate(self, n: int, t: type[T]) -> list[T]:
        """Generate n values by converting the generated values to floats.

        Args:
            n: The number of values to generate.
            t: The type to convert to.

        Returns:
            list[str]: The generated values.
        """
        return [GeneratorWrapper.convert(x, t) for x in self.internal.generate(n)]


# endregion


# region Abstract Typed Base Classes


@dataclass
class GeneratorBool(Generator[bool], ABC):
    """Abstract Base Class for Generators that generate booleans."""

    def to_bool(self) -> GeneratorBool:
        """Convert the Generator to a Generator of booleans."""
        return self.copy()


@dataclass
class GeneratorStr(Generator[str], ABC):
    """Abstract Base Class for Generators that generate strings."""

    def to_str(self) -> GeneratorStr:
        """Convert the Generator to a Generator of strings."""
        return self.copy()


@dataclass
class GeneratorFloat(Generator[float], ABC):
    """Abstract Base Class for Generators that generate floats."""

    def to_float(self) -> GeneratorFloat:
        """Convert the Generator to a Generator of floats."""
        return self.copy()


@dataclass
class GeneratorInt(Generator[int], ABC):
    """Abstract Base Class for Generators that generate integers."""

    def to_int(self) -> GeneratorInt:
        """Convert the Generator to a Generator of integers."""
        return self.copy()


# endregion

# region Wrapper Classes


@dataclass
class GeneratorWrapperStr(GeneratorStr, GeneratorWrapper[U, str]):
    """A Wrapper class for converting Generators to string Generators."""

    def generate(self, n: int) -> list[str]:
        """Generate n values by converting the generated values to strings.

        Args:
            n: The number of values to generate.

        Returns:
            list[str]: The generated values.
        """
        return self.wrapper_generate(n, str)


@dataclass
class GeneratorWrapperFloat(GeneratorFloat, GeneratorWrapper[U, float]):
    """A Wrapper class for converting Generators to float Generators."""

    def generate(self, n: int) -> list[float]:
        """Generate n values by converting the generated values to floats.

        Args:
            n: The number of values to generate.

        Returns:
            list[str]: The generated values.
        """
        return self.wrapper_generate(n, float)


@dataclass
class GeneratorWrapperInt(GeneratorInt, GeneratorWrapper[U, int]):
    """A Wrapper class for converting Generators to integer Generators."""

    def generate(self, n: int) -> list[int]:
        """Generate n values by converting the generated values to integers.

        Args:
            n: The number of values to generate.

        Returns:
            list[str]: The generated values.
        """
        return self.wrapper_generate(n, int)


@dataclass
class GeneratorWrapperBool(GeneratorBool, GeneratorWrapper[U, bool]):
    """A Wrapper class for converting Generators to boolean Generators."""

    def generate(self, n: int) -> list[bool]:
        """Generate n values by converting the generated values to booleans.

        Args:
            n: The number of values to generate.

        Returns:
            list[str]: The generated values.
        """
        return self.wrapper_generate(n, bool)


# endregion

# region Abstract Typed Composite Classes


@dataclass
class GeneratorCompositeAdd(GeneratorComposite[T_SFI]):
    """A Composite Generator that adds two Generators."""

    def generate(self, n: int) -> list[T_SFI]:
        """Generate n values by adding the two generated values.

        Args:
            n: The number of values to generate.

        Returns:
            list[str]: The generated values.
        """
        return [a + b for a, b in self.zip_generators(n)]


@dataclass
class GeneratorCompositeSub(GeneratorComposite[T_FI]):
    """A Composite Generator that subtracts two Generators."""

    def generate(self, n: int) -> list[T_FI]:
        """Generate n values by subtracting the two generated values.

        Args:
            n: The number of values to generate.

        Returns:
            list[str]: The generated values.
        """
        return [a - b for a, b in self.zip_generators(n)]


@dataclass
class GeneratorCompositeMult(GeneratorComposite[T_FI]):
    """A Composite Generator that multiplies two Generators."""

    def generate(self, n: int) -> list[T_FI]:
        """Generate n values by multiplying the two generated values.

        Args:
            n: The number of values to generate.

        Returns:
            list[str]: The generated values.
        """
        return [a * b for a, b in self.zip_generators(n)]


@dataclass
class GeneratorCompositeTrueDiv(GeneratorComposite[T_F]):
    """A Composite Generator that divides two Generators."""

    def generate(self, n: int) -> list[T_F]:
        """Generate n values by dividing the two generated values.

        Args:
            n: The number of values to generate.

        Returns:
            list[str]: The generated values.
        """
        return [a / b for a, b in self.zip_generators(n)]


@dataclass
class GeneratorCompositeFloorDiv(GeneratorComposite[T_FI]):
    """A Composite Generator that floor divides two Generators."""

    def generate(self, n: int) -> list[T_FI]:
        """Generate n values by floor dividing the two generated values.

        Args:
            n: The number of values to generate.

        Returns:
            list[str]: The generated values.
        """
        return [a // b for a, b in self.zip_generators(n)]


@dataclass
class GeneratorCompositePow(GeneratorComposite[T_FI]):
    """A Composite Generator that exponentiates two Generators."""

    def generate(self, n: int) -> list[T_FI]:
        """Generate n values by exponentiating the two generated values.

        Args:
            n: The number of values to generate.

        Returns:
            list[str]: The generated values.
        """
        return [a**b for a, b in self.zip_generators(n)]


@dataclass
class GeneratorCompositeAnd(GeneratorComposite[T_B]):
    """A Composite Generator that ands two Generators."""

    def generate(self, n: int) -> list[T_B]:
        """Generate n values by anding the two generated values.

        Args:
            n: The number of values to generate.

        Returns:
            list[str]: The generated values.
        """
        return [a and b for a, b in self.zip_generators(n)]


@dataclass
class GeneratorCompositeOr(GeneratorComposite[T_B]):
    """A Composite Generator that ors two Generators."""

    def generate(self, n: int) -> list[T_B]:
        """Generate n values by oring the two generated values.

        Args:
            n: The number of values to generate.

        Returns:
            list[str]: The generated values.
        """
        return [a or b for a, b in self.zip_generators(n)]


@dataclass
class GeneratorCompositeXor(GeneratorComposite[T_B]):
    """A Composite Generator that xors two Generators."""

    def generate(self, n: int) -> list[T_B]:
        """Generate n values by xoring the two generated values.

        Args:
            n: The number of values to generate.

        Returns:
            list[str]: The generated values.
        """
        return [a ^ b for a, b in self.zip_generators(n)]


# endregion

# region Composite Classes

# region Composite Classes for Addition


@dataclass
class GeneratorCompositeAddStr(GeneratorCompositeAdd[str], GeneratorStr):
    """A Composite Generator that adds two String Generators."""


@dataclass
class GeneratorCompositeAddFloat(GeneratorCompositeAdd[float], GeneratorFloat):
    """A Composite Generator that adds two Float Generators."""


@dataclass
class GeneratorCompositeAddInt(GeneratorCompositeAdd[int], GeneratorInt):
    """A Composite Generator that adds two Integer Generators."""


# endregion
# region Composite Classes for Subtraction


@dataclass
class GeneratorCompositeSubFloat(GeneratorCompositeSub[float], GeneratorFloat):
    """A Composite Generator that subtracts two Float Generators."""


@dataclass
class GeneratorCompositeSubInt(GeneratorCompositeSub[int], GeneratorInt):
    """A Composite Generator that subtracts two Integer Generators."""


# endregion

# region Composite Classes for Multiplication


@dataclass
class GeneratorCompositeMultFloat(GeneratorCompositeMult[float], GeneratorFloat):
    """A Composite Generator that multiplies two Float Generators."""


@dataclass
class GeneratorCompositeMultInt(GeneratorCompositeMult[int], GeneratorInt):
    """A Composite Generator that multiplies two Integer Generators."""


# endregion
# region Composite Classes for True Division


@dataclass
class GeneratorCompositeTrueDivFloat(GeneratorCompositeTrueDiv[float], GeneratorFloat):
    """A Composite Generator that divides two Float Generators."""


# endregion
# region Composite Classes for Floor Division


@dataclass
class GeneratorCompositeFloorDivFloat(
    GeneratorCompositeFloorDiv[float], GeneratorFloat
):
    """A Composite Generator that floor divides two Float Generators."""


@dataclass
class GeneratorCompositeFloorDivInt(GeneratorCompositeFloorDiv[int], GeneratorInt):
    """A Composite Generator that floor divides two Integer Generators."""


# endregion
# region Composite Classes for Power


@dataclass
class GeneratorCompositePowFloat(GeneratorCompositePow[float], GeneratorFloat):
    """A Composite Generator that exponentiates two Float Generators."""


@dataclass
class GeneratorCompositePowInt(GeneratorCompositePow[int], GeneratorInt):
    """A Composite Generator that exponentiates two Integer Generators."""


# endregion
# region Composite Classes for And


@dataclass
class GeneratorCompositeAndBool(GeneratorCompositeAnd[bool], GeneratorBool):
    """A Composite Generator that ands two Boolean Generators."""


# endregion
# region Composite Classes for Or


@dataclass
class GeneratorCompositeOrBool(GeneratorCompositeOr[bool], GeneratorBool):
    """A Composite Generator that ors two Boolean Generators."""


# endregion

# region Composite Classes for Xor


@dataclass
class GeneratorCompositeXorBool(GeneratorCompositeXor[bool], GeneratorBool):
    """A Composite Generator that xors two Boolean Generators."""


# endregion


# endregion
